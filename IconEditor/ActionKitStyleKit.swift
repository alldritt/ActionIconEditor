//
//  ActionKitStyleKit.swift
//  ActionKit
//
//  Created by Mark Alldritt on 2020-06-21.
//  Copyright Â© 2020 Late Night Software Ltd.. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ActionKitStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawSampleView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.351, green: 0.589, blue: 0.668, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 100, height: 100), cornerRadius: 26)
        fillColor.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEditButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.351, green: 0.589, blue: 0.668, alpha: 1.000), strokeColor: UIColor = UIColor(red: 0.385, green: 0.633, blue: 0.931, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 1.5, y: 1.5, width: 97, height: 97), cornerRadius: 28)
        strokeColor.setStroke()
        rectanglePath.lineWidth = 3
        rectanglePath.stroke()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 6, y: 6, width: 88, height: 88)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ActionKitStyleKit.drawSampleView(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, fillColor: fillColor)
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfSampleView(fillColor: UIColor = UIColor(red: 0.351, green: 0.589, blue: 0.668, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            ActionKitStyleKit.drawSampleView(fillColor: fillColor)

        let imageOfSampleView = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSampleView
    }

    @objc dynamic public class func imageOfEditButton(fillColor: UIColor = UIColor(red: 0.351, green: 0.589, blue: 0.668, alpha: 1.000), strokeColor: UIColor = UIColor(red: 0.385, green: 0.633, blue: 0.931, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            ActionKitStyleKit.drawEditButton(fillColor: fillColor, strokeColor: strokeColor)

        let imageOfEditButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfEditButton
    }




    @objc(ActionKitStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
